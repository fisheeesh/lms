// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  firstName       String?  @db.VarChar(52)
  lastName        String?  @db.VarChar(52)
  email           String   @unique @db.VarChar(52)
  password        String
  tenant          String
  role            Role     @default(USER)
  status          Status   @default(ACTIVE)
  errorLoginCount Int      @default(0) @db.SmallInt
  rndToken        String
  avatar          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenant, createdAt(sort: Desc)])
  @@index([role, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([tenant, role, status, createdAt(sort: Desc)])
  @@map("users")
}

model Otp {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(52)
  otp           String
  rememberToken String
  count         Int      @default(0) @db.SmallInt
  createdAt     DateTime @default(now())
  error         Int      @default(0) @db.SmallInt
  verifyToken   String?
  updatedAt     DateTime @updatedAt
}

model Log {
  id               Int       @id @default(autoincrement())
  ts               DateTime
  tenant           String
  source           LogSource
  vendor           String?
  product          String?
  eventType        String?
  eventSubtype     String?
  severity         Int?      @db.SmallInt
  action           Action?
  user             String?
  host             String?
  process          String?
  src_ip           String?
  src_port         String?
  dst_ip           String?
  dst_port         String?
  protocol         String?
  url              String?
  http_method      String?
  status_code      Int?      @db.Integer
  rule_name        String?
  rule_id          String?
  ip               String?
  reason           String?
  cloud_account_id String?
  cloud_region     String?
  cloud_service    String?
  raw              Json?
  tags             String[]  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenant, ts])
  @@index([tenant, source])
  @@index([tenant, eventType])
  @@index([ts])
  @@index([tenant, user])
  @@index([tenant, ip])
  @@index([createdAt(sort: Desc)])
  @@index([tenant, createdAt(sort: Desc)])
  @@index([tenant, source, createdAt(sort: Desc)])
  @@index([tenant, action, createdAt(sort: Desc)])
  @@index([tenant, eventType, createdAt(sort: Desc)])
  @@index([tenant, ip, createdAt(sort: Desc)])
  @@map("logs")
}

model AlertRule {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant        String   @db.VarChar(52)
  name          String   @db.VarChar(52)
  condition     String   @db.VarChar(52)
  threshold     Int
  windowSeconds Int?     @default(0)
  createdAt     DateTime @default(now())

  @@unique([tenant, name])
  @@index([tenant])
  @@map("alert_rules")
}

model Alert {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant      String
  ruleName    String
  status      AlertStatus @default(NEW)
  triggeredAt DateTime    @default(now())

  @@index([tenant, triggeredAt])
  @@index([ruleName, triggeredAt])
  @@map("alerts")
}

enum AlertStatus {
  NEW
  ACK
  CLOSED
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}

enum LogSource {
  FIREWALL
  API
  CROWDSTRIKE
  AWS
  M365
  AD
  NETWORK
}

enum Action {
  ALLOW
  DENY
  CREATE
  DELETE
  LOGIN
  LOGOUT
  ALERT
}
